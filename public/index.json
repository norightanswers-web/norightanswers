
[{"content":" Thoughts, Opinions \u0026amp; Ideas on # Game Design and Development # ","date":"October 17 2025","externalUrl":null,"permalink":"/","section":"","summary":"","title":"","type":"page"},{"content":"","date":"October 17 2025","externalUrl":null,"permalink":"/tags/craft/","section":"Tags","summary":"","title":"Craft","type":"tags"},{"content":"When designing a new feature, a useful approach is to design it in tiers. This helps focus your intention, prioritize tasks for implementation and lets you react to scope changes while preserving the spirit of the feature.\nFeature Clarity # While it is naturally enjoyable to prototype, theorycraft and bluesky about what a new feature might be and how it could work, there’s a point where you need to know what the absolute core of the feature really is and where it fits into the experience.\nWhat is its primary purpose in the game? What are its secondary interactions with other game systems? What is important here and what is simply nice to have?\nDuring this process I typically use a three tier system:\nFeature Core # This is a small list of only the most essential pieces of the feature to make it functional in the game. At this stage there’s effectively no realisation unless it’s absolutely required for the feature to be understood.\nImportant # The next level up is the list of things that will flesh out how the core of the feature works and begin adding additional signs and feedback. Natural extensions of the feature can be documented here, but limited to those that add the most value to the experience.\nNice to Have # This list includes all of the polish tasks, additional player comfort and further opportunities where the feature can intersect with other aspects of the game in secondary or tertiary orders.\nHow you choose to divide up the various levels of realisation will, as always, depend on your studio, project and personal preference. For example, it could be a five tier system with more granularity to each tier or a two tier system that focuses only on what is absolutely required and what is polish beyond that. At this stage however, I would suggest avoiding making this list too finely grained - for now, buckets that clarify the relative importance of the pieces of the feature is enough.\nWhere each aspect of the feature lands within your chosen tiering system will reveal whether the intersections between features that you foresaw are really as important as you first thought. Perhaps they are, but perhaps not. You will need to be brutally honest with yourself during this process and be willing to rate that idea you thought was brilliant as a nice to have if that’s really what it is.\nPrioritization by Design # Once you have tiers assigned to each aspect of the feature you can naturally begin prioritizing what to implement first. This prioritization should begin with your most important tier and naturally progress to the least important. Within each tier you can then rate the order you feel tasks should be implemented in.\nThis will give you some level of control over the evolution of the feature and let you review it at each step of implementation to ensure it’s meeting expectations and aligning with the overall experience in the game as well. It also ensures that if changes are needed to the feature, you can discover that much sooner than you otherwise might.\nWhen working in a team, it’s likely there will be some conversation about the prioritisation you’ve proposed. It’s important to be somewhat flexible here while still ensuring the feature shapes up as you expect. There may be tasks that happen out of order due to implementation dependencies and that’s ok! As long as the tiers are tackled in order you’re still on track to deliver the feature as expected. If that’s not happening though, sitting down with both stakeholders and implementation specialists to discuss why and come to agreement on all sides, is worth doing.\nSurgical Cuts # Let’s face it: having to cut part or all of a feature can be hard, but it’s a fact of life in game development. As a result, you’ll need to consider what will happen to the player experience, if you’re still able to achieve the vision and whether or not it leaves a gaping feature-shaped hole in the game overall.\nBy designing in tiers you’ll have a better idea, in advance, which aspects of the feature are at risk of being cut because you’ve already done the work of deciding the importance of each and guided the implementation order of things thus far. You’ll know ahead of time which of the remaining tasks are really critical and which can be let go or put in a backlog for consideration in a future update, if that’s applicable.\nThis information, while not infallible, is inherently valuable. You can propose changes to the feature that meet scope, have honest and informed conversations about the remaining work and your teammates will appreciate your ability to adapt to evolving conditions without being shocked or surprised by the changing realities of production.\nNatural Growth # Another benefit to this approach is that it will help avoid subtractive design. While design by subtraction can be a useful tool, allowing you to find or strengthen the core elements of a feature, it often results in cut content, wasted work and an impact on team morale. Instead, starting with a small spark - the core of the feature that you can prove works without all of the polish and intersecting systems - allows the feature to mature and expand in a visible way, making decisions in the process to help course correct with minimal disruption.\nDesigning this way is like planting a seed and watching it grow. You’re building a feature out from a solid, proven core to a certain deliverable level, with a roadmap of how to further enhance the feature. This is a reliable way to achieve a strong design that fits more naturally into the experience.\n","date":"October 17 2025","externalUrl":null,"permalink":"/posts/designing-in-tiers/","section":"Posts","summary":"A method for designing features that lets you start small, grow naturally and react to proction realities.","title":"Designing in Tiers","type":"posts"},{"content":"","date":"October 17 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"October 17 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"October 10 2025","externalUrl":null,"permalink":"/tags/editorial/","section":"Tags","summary":"","title":"Editorial","type":"tags"},{"content":"It’s very likely that you or someone you know has been there: Your last save or checkpoint was a half hour ago. You’re deeper in the dungeon than you’ve ever been before. You’re low on health and supplies. It’s tense and dangerous and all you want is to find the place where you can save your progress so you can breathe. And then it happens - you die. Maybe it was a heroic last stand or maybe you got blind-sided by a slime. It doesn’t matter, it’s all gone. You’re left frustrated and exhausted from the experience. The last thing you want is to do all that again, so you turn off the game.\nPlayer Time is Precious # As designers we must be very intentional with the experience we are creating, have a deep understanding of how it will impact a player, and whether or how long it will take to push them out of the experience. Every decision we make needs to be weighed against how we expect players will spend their time.\nIn a world where a potential player has more choice than ever on how to spend their time, when anyone chooses to play your game it’s a commitment you should honour. That doesn’t mean giving them exactly what they want, but you should make sure the time they spend with your game leaves them feeling rewarded, rather than frustrated.\nRisk vs Reward or Intentional Abuse # The recent conversation about the difficulty in Silksong has re-ignited the discourse around how much is too much, what’s fair and what makes for a meaningful, rewarding experience. Most of the players I know who have finished, or even come close to finishing, Silksong have done so out of spite and never intend to return to the game due to its elevated, often unfair feeling difficulty.\nWhat constitutes reasonable risk vs reward and where does it begin to abuse the player? Generally speaking, I draw the line based on what mechanics the game has taught the player, how far through the experience they are and whether or not something can reasonably be considered fair. And it’s the last part that is often the crux of the matter.\nAs designers we like to surprise players from time to time or to put a new twist on a situation or mechanic. This is generally a good practice, but it can be taken too far. If you teach a player that a mechanic will give them health and then make them rely on that, you create a sense of safety when they interact with that mechanic. If suddenly that mechanic drains their health instead, it can’t reasonably be said that it’s a fair surprise given that in all other situations or occurrences so far, it’s never done that.\nDigging a bit deeper we need to unpack why that mechanic might change or be subverted. What is it trying to teach the player and is it something players will need to know from now on? If so then it could reasonably be said to be fair given the player is now armed with that knowledge - though intentionally killing the player in an otherwise unavoidable way is dirty pool. If, on the other hand, it doesn’t teach the player something meaningful about the game and is instead used simply to laugh at the player’s misfortune, then it becomes an abuse of their trust. Player’s have a very limited tolerance for that and will remember each incident vividly.\nNavigation \u0026amp; Backtracking # Another area to consider is about the time and effort required to navigate the game world and whether or not backtracking - having to retrace your steps back to a previous point in order to progress - is necessary.\nOften in games that require the player to explore the world as a progression mechanic, there will be places players reach that are dead ends or are blocked until later in the experience. Requiring a story beat, required pre-condition or a new item or ability to pass the block, will require the player to return at a later time.\nUnderstanding and carefully balancing how long these paths are, the challenges encountered on them and how far the player must traverse to reach them when they need to return, are all important considerations. Following on from that, consider how much you tell your players in the game’s UI to support their traversal. For instance, do you highlight doors with different colours to indicate how they’re opened? That provides an at-a-glance tool for players who can then make a plan for their next destination, rather than roaming around randomly or being forced to try to remember where they saw that colour door before.\nRunning the Gauntlet # It’s not uncommon in games to have locked arenas; locations where players are constrained and cannot leave until they’ve overcome a specific challenge - usually a combat or survival challenge.\nThese demand that players use their tools to overcome the challenge at hand before they can proceed. This is a hard gate - if you can’t pass the challenge, you can’t proceed in the game, period (as opposed to a soft gate which you can fail or partially succeed at and still progress). Compounding this is the difficulty of the challenge - too easy and it feels like a waste of time, but too difficult and the player is now stuck.\nConsider mid-challenge checkpoints. In situations where you use waves of challenges, allowing players to attempt the next challenge after overcoming the previous one without having to redo parts of the game they’ve proven themselves already capable of, shows that you respect their time and effort.\nInstead of making a player face 20 waves of enemies before their progress can be saved or checkpointed, break that down into meaningful challenges instead of just a bulk number.\nHave Reasonable Expectations # In all cases a reasonable threshold of player expectations needs to be established, taking into account all of the variables the player could interact with at this stage in the game.\nDo they have health recovery items? Limited ammunition? How will these factors affect the experience if the player has or does not have these when they enter the arena? What happens if they fail - do you replenish any limited use items or supplies they expended?\nSpoilers, but the answer to that last question is almost always yes; if they couldn’t pass the challenge when they had those available how can they possibly pass it without them?\nBe Generous # Always err on the side of generosity with your players. If you as the designer feel something is too easy then it’s still too hard. The countless hours of development time you’ve put in builds inherent skill and familiarity with the mechanics and gameplay that both you won’t immediately recognise in yourself but also that players won’t have.\nAdd more save/check points than you think are needed. Give more ammo, health and wider windows for player responses to challenges. It is better for a player to finish an easy game and have a positive experience than it is for them to abandon a hard game feeling negatively.\nA potential caveat to this however is if you have major game systems that rely on putting players into a failure state. If they never reach that failure state, it can\u0026rsquo;t possibly serve its purpose. In these cases considerable playtesting and even more careful tuning are required to ensure you’re seeing those states manifest without players getting stuck in a failure spiral. Consider asking yourself if there is real value in those systems and having the player reach that failure state at all.\nOpportunities for Recovery # Just like there are hard and soft gates, there is also hard and soft failure.\nHard failure is an unrecoverable state like the spikes in Mega Man - they kill you instantly with no chance for you to correct what went wrong.\nSoft failure is less severe - it’s a sub-optimal outcome but can be recovered from, like when a guard sees you and becomes altered in a stealth game. You can escape, wait for them to reset to their unaware state and try the challenge again.\nUsing soft failure instead of hard failure isn’t always appropriate, but it does give players more opportunities to recover and learn from mistakes, ultimately giving them a more forgiving experience.\nSkippable Curtscenes # This is another one of those things that shouldn’t need to be said, but we don’t need to watch the same cutscene again and again. If it has to play every time the player reaches a certain point, let them skip it if they want. You can’t force players to absorb or experience something they have no interest in. That will frustrate them and push them out of the game if it happens too often.\nThe better option is to avoid repeatedly throwing the same information at the player to begin with. If you believe that they need to be able to see it again, consider another way for them to review that same information elsewhere in-game like a quest tracker, logbook or a menu that allows them to replay specific cutscenes or audio logs.\nNatural Stopping Points # Sooner or later a player will stop playing your game. Whether it’s to play or do something else, it will happen. We also live in a world where big developers are authoring huge online experiences and demand as much engagement as possible, for as long as possible.\nEven within the strictures of that environment, your game should have a natural cadence to the experience with places where players can sit back, take a breath and preserve their progress, letting them stop playing.\nBuilding these in is important because if you begin demanding play sessions that take longer than the player has available, they simply won’t play anymore. There’s no hard and fast rule here, and the choices made will be for the specific case of your game, but knowing and respecting the fact that players have lives outside your game will mean it’s easier for them to come back to it when they can.\n","date":"October 10 2025","externalUrl":null,"permalink":"/posts/respect-player-time/","section":"Posts","summary":"A player\u0026rsquo;s time is precious, so let\u0026rsquo;s not waste it","title":"Respect Player's Time","type":"posts"},{"content":"There are few terms in game development so often confused, conflated and misunderstood as depth and complexity. It’s not uncommon to see it framed as “depth vs complexity” as though they exist on a sliding scale with depth at one end and complexity the other.\nThe truth is that depth and complexity are separate scales of their own. You can have high or low depth and high or low complexity within the same game because they are not intrinsically tied together. Increasing complexity does not diminish depth, just as decreasing depth does not enhance complexity.\nDepth # Depth is a one-to-many relationship; a single action that has a variety of outcomes in gameplay with consistent, predictable results. It uses a limited number of first order actions, however each action has contextual outcomes.\nLet’s take the example of the crafting grid in Minecraft. It’s a single mechanic that allows you to use multiple ingredients with it in order to create contextual outcomes. What you get out depends on what you put in. The crafting grid is limited in size and forms the most basic layer of crafting in the game. The crafting table extends on this formula. It expands on the crafting grid and allows for more ingredients to be used in order to create more advanced tools and objects.\nIn both cases the only action the player has is adding or removing ingredients to and from the grid. Once the player arranges the ingredients in the grid into a valid recipe, they can remove the created item, consuming the ingredients.\nCharacteristics of Depth:\nOne-to-many relationship Few first order actions Each action has contextual outcomes Complexity # Complexity arises through a many-to-one relationship or many one-to-one relationships. It is notable in that it presents a much larger palette of first order actions for players to understand.\nReturning to the example of crafting in Minecraft, the recipes used to create objects on the crafting table add complexity to the mechanic. With nine slots in the grid and every inventory item in the game able to be placed on any slot, but having only one correct recipe to create a particular object, we have many one-to-one relationships. If you include the variations of tools and objects made with different materials we now have a many-to-one relationship for each outcome.\nCharacteristics of Complexity\nMany-to-one or many one-to-one relationships Many first order actions Each action has an outcome, but isn\u0026rsquo;t guaranteed to be contextual Cognitive Load # Every piece of information we ask players to retain, process and act on increases their cognitive load. Purely from a systems standpoint, each connection between actions and outcomes increases the player’s cognitive load by virtue of needing to understand these relationships and how they will be impacted by them. When you add all of the other elements of the game into the mix there can be a lot for players to take in while playing.\nWhile both depth and complexity add to the player’s cognitive mode, complexity increases it considerably more. Understanding how much you’re asking a player to remember while playing is vitally important. Requiring players to remember and understand too many interactions between systems builds fatigue. Over time, that fatigue compounds and can cause the player to disengage from the experience, pushing them out of the game.\nIt is generally a good practice to use complexity sparingly, intentionally and introduce it slowly in order to give players time to absorb it and acclimate to it. As always however, the approach you choose needs to suit the purposes of the experience you intend to create.\nA Case for Complexity # Consider that sometimes you want something to be complex. Systems that are intentionally difficult to conceptualize or master. They can be meant to simulate a situation or even to intentionally overwhelm the player as part of the experience.\nReturning to the example of Minecraft, the recipe book could have been added much earlier in development, however the original intention was to need to experiment in order to learn how to make objects. This complexity in having obscured recipes added another layer of mystery and learning to the game, which still remains, however has been mitigated by the recipe book.\nAs another example, look at an aeroplane’s control panel. There are many - sometimes dozens - of dials, buttons, switches and indicators that each do something. Flying an aeroplane is a complicated activity by its very nature, so if you want to truly simulate that activity in an immersive way, it will naturally be complex.\n","date":"October 3 2025","externalUrl":null,"permalink":"/posts/depth-and-complexity/","section":"Posts","summary":"Defining and understanding each so you can use them effectively.","title":"Depth and Complexity","type":"posts"},{"content":" Do Your Own Design Analysis \u0026amp; Critique # Working on a feature that you’ve been given specific reference for? Don’t go running to someone else’s analysis and critique looking for their opinion. Do your own.\nWhy? Well, first and foremost, it’s your expertise that’s on order. Everyone has a particular, personal take on any given design and while ingesting someone else’s views can be useful as a comparison or contrast to expand your own point of view, consuming it wholesale means you will regurgitate their opinions without truly understanding them. Lacking that critical piece, you can’t possibly talk with any level of expertise about the opinion you’ve just expressed because you haven’t done the real work.\nIt’s also the way to develop, hone and maintain these important skills. It may sound simple to play a game and take notes, but there are almost always important layers of nuance that you miss unless you can do the deep dive yourself. You may see things that others have missed or perceive them differently. Learning to look at something with a discerning eye is not only beneficial for analyzing other games to see what they do, but also the project you’re working on as well.\nIterate, Don’t Emulate # Following on from the point above, don’t simply replicate other established designs.\nOften when a new feature is brought up, there will be a broad, high level description of the expectations. From there you might be given references to provide an example representation of what is desired. Reviewing the reference material, you’ll gain an understanding of a specific implementation, but not all of the reasons behind it, nor the journey that the team took over the course of the project to arrive at that specific shipped implementation. Every game is different, even within a genre, the decisions made need to be based on the project the feature is for.\nNow, a counter-argument you might hear against this approach is “We don’t need to reinvent the wheel” and that’s true - to a point.\nPerhaps the absolute core basics of a common, well-understood feature don’t need to change but what is it about this feature that makes it specific to this project? What has to change? Where can you improve on what came before? It doesn’t have to be ground breaking; it can be a small change that makes the game feel like the one you’re making and not a replication of the reference material.\nTest Your Changes # We all know this shouldn’t need to be said, but if you’ve worked in the industry for any amount of time, you’ve certainly worked with someone who didn’t test their changes before they submitted. Maybe the effect wasn’t catastrophic, or maybe it broke the build. Either way, those changes needed to be tested before they were submitted.\nEven the smallest change can have a far-reaching impact; tuning one enemy’s health or a player’s weapon damage, even slightly, could throw off the balance of carefully constructed encounters. This is where having a test map (also called a gym or lab) is often very helpful. Being able to evaluate the impact of your changes in a safe environment saves time and lets you construct specific circumstances to ensure the change is good.\nRemember that once you submit, the rest of the team will get your change. Taking a few extra minutes of your time could potentially save hours or days of time across the entire team.\nUnderstand Feedback # Getting feedback on features, tuning, gameplay and the overall feel and experience of the game is a regular, helpful process. The trick is really understanding that feedback so you can make an informed decision as to how to proceed.\nFeedback is best given live. Getting a bullet-list in an e-mail is rarely particularly helpful unless it’s in preparation for an upcoming conversation. This is because the reason for the feedback is almost never given. You’ll get notes like “Reload speed is too long” or “X happened during gameplay”. Those are factual, but not particularly helpful and lack context. That means you probably can’t make a good decision based on it.\nWhat if you can’t get the feedback live - what can you do? Well, if your project or studio captures video footage of reviews, that can be a good place to start so you can see what happened, after the fact. What was the situation that led to the feedback? How did the gameplay evolve, how could it have evolved and what was the expectation both from the player and you as the designer?\nMost importantly though, is talking with the people giving the feedback to really get an idea of where they’re coming from. Listen to what they have to say, how they feel about it and what their expectations were. Ask questions, but don’t lead them to any particular answer - be open ended and let them tell you, rather than be guided. Use that to inform your decision about how to proceed and what changes to make or, sometimes, not make.\nAn important point here is that, especially when the team has been playing the game for a while in a specific way, changes that are otherwise beneficial can be perceived as negative. Did your game previously have infinite ammo and no reload, but those features were recently added? It’s possible they’re not being well received because they’re not tuned or balanced yet, but it’s also possible these new features are just different and that’s enough.\nWhat If # Sometimes answers to design problems flow naturally, clicking into place in a way that feels like magic, while other times they seize up and for the life of you, you just can’t seem to get where you feel is right.\nDon’t be afraid to step outside of the established conventions of thought you have for the project. It’s not uncommon for some of the assumptions made during the course of production to change, even unexpectedly. Some of the best games have dared to explore unconventional, unexpected or straight-up strange territory.\nAsk yourself, “What if…” when you’re considering how to approach a mechanic or player experience. Thinking about the player experience in a new way, divorced from currently established gameplay paradigms, can lead you to those critical “ah-hah!” moments that tip off a train of thought or conversation leading to a breakthrough.\nWhat if the mechanic…\nIs it’s own gameplay context Can be stolen, taken or used by an opponent Is inverted Is a tug-of-war Happens as a second-order effect of other gameplay actions These are just some examples. Creating your own list of “what if’s” to refer to and test ideas against is a helpful tool that can also lead to developing or reinforcing your own signature style of game design.\nOnce you think you’ve got your “ah-hah” idea, making it fit with the core vision of the game and the established gameplay in a way that enhances the experience, rather than upends or diminishes it, is the challenge. Once again, sometimes the solution to that challenge comes to you fully formed, and in others you just have to ask “What if…”.\n","date":"September 26 2025","externalUrl":null,"permalink":"/posts/5-tips-for-being-a-better-designer/","section":"Posts","summary":"Selected advice to elevate your design game","title":"5 Tips for Being a Better Designer","type":"posts"},{"content":"If you hand a dual analogue stick, 10+ button controller with a D-Pad and contextual/media buttons to someone who hasn’t been playing games for most of their life, odds are they’ll turn it over in their hand like it’s an alien artefact, with no idea of how to use it.\nI first noticed this when I was a kid. The controllers were much simpler then, but still none of the adults would play games with me. Even if they did hold the controller correctly, and there were some deeply amusing incorrect attempts made, they just didn’t have the required skill to interact with the game, nevermind play with a kid who had been performing this seemingly basic interaction for his whole life up to that point.\nWhen my kids got old enough to be interested in games, they’d sit on my knee as I played and would watch or direct me on what to do. This was great when they were small but sooner or later they wanted to be able to do it for themselves. Except, when I handed them the controller, even with direct, hands-on guidance, they were quickly frustrated by their inability to translate what they wanted to do, into action in the game.\nIt’s no wonder - modern games have high expectations of players, and responding to the information and situations presented needs a suite of different actions. As designers we’ve had to find creative ways to get the most out of the limited number of buttons on a controller, which has led us to devise a variety of input actions.\nThe most common input actions are:\nPress - One press of a button. Triggers either when the button is pressed or released Hold - Keeping a button pressed for a duration Repeated - Pressing the same button multiple times (also called tapping) Sequential - Pressing a series of button in a specific order Chorded - Pressing (or holding) more than one button at a time Along with input actions, there are Gameplay considerations:\nInput buffering - Preserving a button press for an amount of time, to be consumed after a gameplay action or duration has occurred Input window - The amount of time the player has to perform an input action Input layout - How far does the player need to move a finger, thumb or hand to perform an action Given all of the above, it’s fair to say that these are massive hurdles for new players to learn and overcome.\nTo digress here briefly, this is also one of the reasons why the Wii was such a smash hit and phenomenon. It took otherwise challenging controls and made them extremely simple. That, in turn, influenced the types of games that were made for the system to a large degree. Regardless of your feelings about motion controls, it’s inarguable that this simplicity opened up gaming to a much wider audience. Like my grandmother, who had a Wii and played a tonne of Wii Sports.\nAs I thought about the specific challenges my children were facing, I realised that they needed to have curated experiences that would allow them to engage with a game they could enjoy, but that presented limited demand for inputs. I compiled the following list to gradually increase their literacy with a modern controller.\nDonut County\nBesides being an absolute gem of a game, it also has the perfect onboarding for teaching a player how to navigate a virtual environment; it starts with just the left analogue stick.\nYou can’t get hurt, fall out of the world or actually fail the levels (excepting perhaps the last one, if memory serves). The lack of gameplay consequences means it is a risk-free playground where you can experiment at your own pace.\nThe game’s presentation is clean and stylish making it easy to parse visually for newer players as well. While the presentation is in 3D, the gameplay is largely constrained to 2D, with some exceptions for later mechanics, which also gently teach players how to interact with the third dimension.\nThis is my go to game to teach a beginner how to use a controller to interface with a virtual world.\nUnpacking\nSimilar to Donut County in terms of its gameplay safety, this is a great title to teach finer control of an analogue stick as you pick things up out of boxes and put them where you feel they belong.\nAgain, there are no gameplay failure conditions or requirements for timed resulting in a game over, though you do need to be more precise with your interactions.\nUntitled Goose Game\nAnother game with a nicely staged introduction to teach players the ropes in small, easy to digest chunks. The inputs aren’t demanding up front but it does introduce low stakes pressure early on as you reach the first area and learn to deal with the gardener.\nNavigation is 2D with some areas that you can pass under or over. There are some controls that, by default, require the player to hold a button while doing something else, but it’s intuitively introduced and natural as it matches the on-screen presentation well.\nThe addition of some truly excellent humour is an interesting complication as I’ve seen my kids fail to perform some inputs because they were laughing too hard. Not a bad problem to have, really.\nAnimal Crossing: New Horizons\nWhile still largely sticking to 2D movement and navigation, this adds more elements that need inputs, like inventory management. This is a new gameplay context that players need to understand navigating won’t cause their character to move until they close the menu, which is something that definitely tripped up at least one of my kids when they played it.\nIt introduces verticality slowly through both stepped terrain and floating objects you learn to shoot down. There is some light input time pressure for certain activities, but they aren’t particularly stressful, and the gameplay is forgiving.\nMinecraft (Creative)\nMany and more words have been written about Minecraft but few, if any, focus on how well Creative Mode is a low stakes opportunity to allow players to learn and explore 3D controls and movement in a game. The game defaulting to first person view does take some adjustment for new players as now forward on the left analogue stick is no longer “up” on screen, but forward and in order to look around you must begin developing skill with your right thumb to control the camera.\nDue to the lack of consequences in Creative Mode, players are free to spend time learning how to navigate and create without the pressure or threats that Survival Mode has.\nThese titles acted as a safe way to learn how to use a modern controller to interact with a virtual world. My kids went from feeling frustrated at their inability to use a controller to feeling encouraged to explore more games and expand their skills. The confidence they built up through the course of this progression of games translated to others, with different types of gameplay challenges and required inputs. And, as a designer, it was an interesting and enjoyable problem to solve; to deconstruct where they were having trouble and figure out how to alleviate that in a way that let them build skill, have fun and learn to enjoy games without struggling with the controls.\n","date":"September 12 2025","externalUrl":null,"permalink":"/posts/modern-controllers-are-terrifying/","section":"Posts","summary":"A look at the complexities of controllers for new players","title":"Modern Controllers are Terrifying","type":"posts"},{"content":"I’ll admit right off the top that I’m a remote work advocate. I’ve been working remotely in games for 5 years as of this writing, with occasional work-from-home days before that. For anyone familiar with my professional history, you’ll also know I worked in IT before I was in games, and that also meant working remotely when needed. Which was often. It’s fair to say I have a lot of experience in remote work. Like everything though, it has its ups and downs. So let’s explore some of those.\nChallenges # It’s not for everyone # Remote work is inherently less guided and structured than an in-office situation. You need to be more organized, structured and self-motivated than you otherwise might in an office or studio environment. As you won’t be sitting near coworkers, visiting the kitchen, coffee machine or water cooler with colleagues, it takes extra effort to ensure the normal communication that happens naturally in a professional space still occurs.\nThere can be additional challenges if the workplace is hybrid and a group is gathered in a conference room location, while some attendees are remote. Seeing what someone is drawing on a whiteboard in the meeting room can be a challenge and usually requires a specific camera setup, which can otherwise leave remote participants out of the conversation.\nIt can be lonely # If you’re a highly social person who thrives on watercooler conversations and other ad-hoc or spur-of-the-moment interactions with peers, you might struggle in a fully remote environment. Not occupying the same physical space means you don’t have those chance encounters with coworkers. You can alleviate some of this by having short, informal voice or video calls with colleagues, or an open drop in/out chat channel in the collaboration software of your choice, but it does take extra effort.\nWith reduced in-office social interactions, you may find that you need to substitute other social opportunities locally. Going to a coffee shop or chatting with a neighbour can help provide some of that missing social engagement.\nYou need to be confident in what you do, and how # For someone who has been practicing their craft for a long time, this won’t be as much of an issue, but particularly for folks who are new to the industry or have taken on a new role, this can be challenging. Not being confident in your skills and processes can often translate negatively as people might mistake your lack of confidence as a lack of expertise, care about your work or as sloppiness. Being confident, while still being humble, open to feedback and adjusting your approach as needed, will go a long way in the team’s faith in your expertise. It’s important to remember that you were hired or promoted to a position for a reason. Believe in your ability to do the job.\nA note of caution here, however, this isn’t an invitation to openly challenge established decisions and direction. Making suggestions, when done respectfully, will always land better with the team - even if your idea is off the mark - than stubbornly insisting you know best.\nTimezones # While not universal to remote work, it is possible that you will be dealing with team members, outsourcing firms or other contacts that are in different timezones. Being aware of where your team members and contacts are, and what time it is for them, will let you maximize your ability to communicate and shorten the amount of time it takes to get things done. A useful, platform independent, tool for this is The World Clock.\nSome studios will also implement core hours to ensure there’s a shared period of overlap in the team, which can be beneficial as well, provided team members can reasonably share some overlap.\nYou can use this to your advantage. In the past, while working with a distributed team, I leveraged my timezone to act as a bridge between team members whose days were ending when I logged on and those who would log on later in my day. This ensured that information flowed smoothly and people could make informed decisions, even when they couldn’t communicate directly.\nIn another instance, because my day started before some other team members, I often had quiet mornings that let me focus on my own work or connect with other designers before the bulk of the scheduled meetings began. For folks logging on later, they would start with meetings and typically end with a quieter, more productive afternoon.\nTeam collaboration software is also useful here to send asynchronous messages which can be read when a person logs on, or scheduled to be delivered at a later time. Be careful to avoid sending large walls of text or stream-of-consciousness type messages as that can overwhelm the recipient and feel as though what you’re saying isn’t a point for discussion, but rather a directive.\nBenefits # No Commute # As someone who spent years doing multi-hour commutes, this is one of the biggest benefits of working remotely. The time I used to spend stuck in traffic I now get to spend with my family. This can help reduce stress and has the added benefit of eliminating commuting costs as well - not only for fuel, but for associated costs like stopping for breakfast or coffee on your way.\nTime Management # There is inherently more freedom to choose how to spend your time while working remotely than when you’re in an office. If you need to step away from your desk for a minute to grab a coffee, or take a 15 minute walk to refocus, you’re much more free to do that. However, with that does come the responsibility to make sure you’re still available when needed, and completing your work effectively.\nPersonal Space # Instead of a sterile cubicle or open-plan office filled with noise, you can curate your own environment in the way that makes you feel most comfortable. Being able to make your own choices about how to structure your environment is important; want a standing desk, wall of plants or to listen to music while you work? Those are all much more easily accommodated when you control your work environment instead of having an office plan that has pre-chosen the layout and furnishings.\nDo be aware though that you also won’t have the benefits of that environment, like having cleaners come around, so you’ll also be on the hook for keeping things clean.\nDepending on your particular living arrangements, you may also be able to have pets which are proven to have beneficial effects and are often popular when they appear on team calls, whether intentional or not.\nHealth # Even before the Covid-19 pandemic, office viruses, flus and other illnesses were a common occurrence as, inevitably, someone would come to work sick or pre-symptomatic. From there it was only a matter of time before many people in the office had caught the illness du jour and taken some sick days to recover.\nWorking remotely lets you take more control of your exposure to illnesses. You can more easily avoid public transit and large crowds, choosing to go out at off-peak times, if at all. That said, if you live with family members that regularly work outside your home or attend school, you have less control over your exposure.\nThat said, do still take sick days when you’re unwell. Yes, having a sniffle while being contagious means you could still work remotely, but there is a point at which you will need to take the time to rest.\nThose are a few notable challenges and benefits. In the next section I’ll provide some general Dos and Don’ts. I expect that some will be obvious but others may not be immediately apparent or more suited to remote work environments.\nDo # Overcommunicate # The nature of human communication is imperfect even under the best of conditions, however when communicating primarily via text, and often asynchronously, we introduce more opportunities to be misunderstood.\nTo help mitigate this, never be afraid to state the obvious or restate something someone else has said to ensure you both understand one another. Reach out in private with a “Hey, I just wanted to make sure we’re on the same page. When I/you said this, here’s what I think it means” or even hop into a quick video call for that face-to-face confirmation. It will absolutely help solve issues with miscommunication or even misunderstandings about features, expectations, deadlines and other topics as well.\nBe patient, kind \u0026amp; understanding # You never know what another person is dealing with or going through, and the nature of remote work means you’re less likely to find out that being in an office, for better or worse. With that in mind, defaulting to kindness is always the best option. Making games is a team sport and without the team there is no game.\nBe Flexible # Sometimes someone isn’t available to meet at a convenient time, or there’s a time sensitive task that needs attention. These can happen outside your normal schedule. One of the benefits of not having to be present in a specific physical location is that you can deal with these things from the comfort of your own remote work space and return, almost instantly, to your usual routine.\nThis flexibility is valuable, but shouldn’t be abused. It can be easy to fall into a pattern of regularly or repeatedly checking in after hours, but unless it’s necessary be sure to give yourself a break and save it for when it’s really needed.\nDon’t # Work Multiple Jobs # No, I shouldn’t have to say it. It’s one of the reasons employers say they don’t like remote work and it spoils it for everyone. Having witnessed it first hand, know that it’s clear something strange is going on and you will eventually be found out. And, when that happens, it will go poorly. In addition to whatever legalities are entailed and penalties your employer(s) may levy on you - which will almost certainly be dismissal with cause - your team members will feel betrayed.\nGames are incredibly hard to make and we rely on each other to a very large degree and to know you’ve been splitting your time, every instance where you weren’t available despite the actual reason, will be seen as you choosing to spend that time working for someone else.\nThis is a small industry, made up of people who like to work with other good and talented people, and if you’re caught doing this your name will be known and you will be blacklisted. Hiring managers will often ask the team for names of people they should hire, but at the same time they also appreciate being given names to avoid.\nSo seriously, I can’t stress this enough, just don’t do it.\nGo Rogue # Not having someone looking over your shoulder isn’t free licence to do as you please, prototyping or building new features that aren’t currently planned. If you have something you want to try for the game, always make sure you’ve got approval to allocate time to try it.\nSurprise dropping entirely new, unrequested features into the game can cause a lot of noise and confusion on the team, and that’s never beneficial.\nInfer tone from text # You cannot truly deduce tone - which informs our interpretation and leads to our initial reaction - from text alone. While this is generally good advice, it becomes extra important when working remotely because it’s very likely the majority of the communication you have with your team in a day will be text-based.\nIf you feel a strong reaction to the tone of a message you’ve received, ask the person to clarify what they mean or even to have a call with them. And in cases where you feel a message you’ve sent might be easily misconstrued, you can pre-emptively reach out to clarify yourself.\nWorking remotely can be challenging and rewarding. As with everything there are trade-offs and every remote job is different, with their own sets of policies, procedures, expectations and benefits. Hopefully this primer gives something useful for someone considering remote work for the first time, and those who have done it before.\n","date":"September 11 2025","externalUrl":null,"permalink":"/posts/working-remotely-in-game-dev/","section":"Posts","summary":"Things to consider when working remotely in game development","title":"Working Remotely in Game Development","type":"posts"},{"content":"I’ve recounted this a number of times, in varying levels of detail, over the years when discussing the topic of how I got into games. This is, I think, the most complete version fit for general consumption.\nAround the time I was finishing high school in the late 90s, and opting not to take OAC (the Ontario Academic Credit, aka grade 13), I was starting to think about what I would do once school ended.\nGrowing up I’d always had a variety of interests and hobbies. Naturally, that meant that while I had some options, I didn’t have a clear path. As is usual for many kids, every year changed what I thought I wanted to do with my life. Late in public school I was in a production of The Miracle Worker and considered acting. In my first year of high school I began reading about genetics and was sure that was what I wanted to do. The next year it was history. And so on. But when the end of my last year in high school was upon me, suddenly I didn’t have that one thing that I wanted to be.\nUltimately I boiled my choices down to a few different options I could pursue; I could…\n…study music. I grew up in a musical family, played guitar in a band and classical guitar throughout high school. As much as I loved it, I just didn’t see it turning into a viable career.\n…study history. I had a long love of history and always did well in the subject, but it would mean I’d likely have to teach and I definitely wasn’t interested in that.\n…go into games. I’ve loved games for as long as I can remember. I started out on the Commodore 64 and was a Nintendo kid. Throughout school I’d submit computer class assignments as little games. The problem was that I didn’t like programming and at the time that was a requirement.\n…do something with computers. I fell in with a new group of friends in high school and got into PC gaming. At the time that also meant you had to learn a lot about building and fixing computers, so I already had some experience.\nThis was the end of the 90’s and the dot com boom was on. What’s more is that there was a well-regarded college not too far from where I lived that offered a 2 year program that would get me into the industry much faster than pursuing a 4 year university bachelor’s degree in computer science.\nDeciding that was the best path forward since I could still live at home, I was getting a post-secondary education and it was for a rapidly growing field, I enrolled in the Computer Support Technician program, opting for the fast-track version of the program. That meant I’d be through the whole thing in a little over half the time thanks to a compressed course schedule. And that would have been good, really, except what I and most of the rest of the technology industry didn’t know was that just as I was about to graduate, the dot com bubble burst.\nCongratulations. You’re fully qualified to be unemployed.\nWith no local employment prospects, a few months later I moved in with some friends who had moved to Toronto, and got a job at a book store. Despite my employment situation and being very poor, this was one of the best times of my life. Sure I was living out of cardboard boxes and sleeping on a futon in the corner of the living room, but I was with friends and every day was a LAN party. What are your early 20’s for, if not that?\nAround that time there were a number of books on game development released - some readers may remember the Premier Press Andre LaMothe game development series. They were primarily focused on programming because, at the time, that’s the skillset you needed to make games and there were very few packaged tools in the way that there are today. Regardless, I ended up buying a few of them but because of the programming and math involved, neither of which I was much good at, I made a few small things but nothing that really scratched the creative itch I had.\nEventually the technology sector began a slow recovery and I landed a job in IT. At first it was contracting, which was uniquely stressful both as someone who wanted a steady, reliable paycheque, but also as an introvert who was being forced into new situations every few months. Thankfully I did manage to find a full-time, salaried position leveraging my IT skills after a while.\nOver the next decade I got married, bought a house and started a family. I dabbled in making little prototypes and proofs-of-concepts for games in my spare time, but it wasn’t my focus. At least not until I got downsized from my job as a systems administrator.\nI took the opportunity to reflect on what I was doing with my life and what I really wanted to be doing. I was tired of IT. I got into it because I enjoyed solving problems and being challenged to figure things out, but it had become more about mitigating disasters while being severely under-funded to prevent said disasters.\nOn a lark I did some online searching for game development jobs in the GTA and I stumbled on a little studio down in the distillery district with an opening for a design intern. I sent my resume and didn’t really expect much to come of it because I had no formal experience making games - just dabbling in making prototypes and experimenting with the first free version of Unity - but, as luck would have it, they called me in for an interview and… I got it. I admit I was kind of blown away.\nThe role lasted four months and I threw myself into it; I was excited about my work for the first time in years. I was on the Dungeons \u0026amp; Dragons: Daggerdale team and getting to design weapons and equipment for a DnD game as my first foray into the industry was a dream come true. The idea that things I was making would become official parts of the Forgotten Realms cannon blew my mind as a kid who had played a tonne of Baldur’s Gate (1998) when it came out. I worked on a number of different aspects of the game and my enthusiasm earned me the opportunity to be a major contributor to a pitch proposal that was being presented to our publisher for a chance to make a new entry in a well known and regarded series they had the rights to.\nEventually I was offered a job as a junior designer; this was it, I’d really done it! But there was a problem - because I was starting at the bottom I’d be making less than half of what I was earning in IT. Not surprising really, but also not something that was financially viable for me given I had a mortgage and a family to support. I tried to negotiate but there was no wiggle room.\nSo, disappointed, I took a deep breath and went back to IT.\nI spent the next four years building and refining my skills. On the train during my morning commute and at night after everyone had gone to bed, I was working away. Programming, doing pixel art, designing mechanics and building levels. I made a bunch of different little things, taught myself about procedural generation and planned to make things that were hilariously out of scope for a single person. Most importantly, I learned a lot.\nGoing back to IT had been hard. It was a means to an end, but it felt wrong for me at this stage of my life, especially after having worked in games where it felt like I had found my people. Everywhere else I worked, when I talked about games I’d get polite nods but no real engagement in conversation. On top of that I had a couple of IT jobs go sour and decided enough was enough. I didn’t like the person I was becoming by being stuck in an industry I had fallen out of love with.\nSo, as I was browsing around looking for games jobs, I happened across a small indie studio who had an open role for a gameplay programmer. That gave me some pause because while I was writing code almost daily in my own projects and prototypes, I had no professional experience writing code. I didn’t even know if I was any good at it, really. But - nothing ventured, nothing gained - I decided to apply.\nSomewhat unexpectedly, I was given their programming test. This was it, again! - my chance to prove I could do this. I spent every free moment of the next two weeks building a three level game with mechanics that progressed over the course of each, a mixture of 2D and 3D art, and a narrative. For a programming test I definitely went overboard, but I wanted to harness all of the skills I’d spent years building and give it everything I had.\nI made something pretty fun in that span of time and had a unique take on integrating the core mechanic into the game and justifying it with a silly narrative and characters. To this day when I let people play it, even with its lack of polish, they find it entertaining.\nA bit of time went by before I heard back. And… I didn’t get it.\nNow, I can’t truly say this was a surprise given my lack of professional programming experience, but it stung all the same. To the studio’s credit, they didn’t send a form letter but a personally written appreciation for my time, effort and talent.\nAnd that was that. There weren’t any other jobs in the area that I could find, and certainly none without more required experience than I had, so I went back to working on side projects and slogging through my days in IT.\nAbout a month later, while on the train home one afternoon, I got an e-mail. I recall having to re-read the e-mail a few times for my brain to really absorb what was happening.\nIt was the indie studio reaching out with a potential opportunity, if I was still interested.\nI had never had a company contact me for a role before. Did this mean I was actually good at what I wanted to be doing? That all the years of teaching myself and honing new skills, early mornings and late nights, was really paying off?\nI felt proud, validated, and excited but also mildly terrified; I really had to do it, day in and day out and prove that was my job from then on. I was in my 30s, 15 years into a career with three kids and a mortgage - right around when people in my generation seemed to be getting themselves figured out and stable - and here I was making a big, risky, possibly stupid decision and blowing up my life.\nI haven’t looked back since.\n","date":"September 10 2025","externalUrl":null,"permalink":"/posts/there-and-back-again/","section":"Posts","summary":"Or, How I got into, out of, and back into game Development","title":"There and Back Again","type":"posts"},{"content":" Hullo and welcome to No Right Answers. I’m John Lethbridge and I’m a game designer. I’ve shipped multiple games from Indie to AA to AAA, in teams from 10 to over 1000 and it’s fair to say I’ve Seen Things.\nWhen I started out I wanted to know what the rules of game design were. I wanted to know all the Dos and Don’ts. I wanted to understand the decision making process and have a list of concrete rules to follow.\nWhat I discovered was that the more I looked, the more I found out the truth:\nThere are, quite literally, No Right Answers.\nWhat that means is that the answers to the questions that come up in development are specific to the game you’re making, the creative vision, the constraints, the point in production you’re at, the systems and intended player experience. There is no silver bullet. No magic formula. And, almost always, the deeper you dig the more questions you have to answer that are specific to the game you’re designing.\nSo then, how are we not just hopelessly adrift in a sea of professional existential dread?\nWell, while working at the crossroads of art and technology a little existential dread is to be expected from time-to-time, as professionals we use established genres as touchstones or starting points, apply or adapt design methodologies, and create, codify and apply our own individual internalised rules - which I refer to as Design Sense, a topic I’ll explore in the future.\nMy goal with this space is to provide an evolving set of thoughts, opinions and ideas, based on my ongoing experience, to add to the conversation about game design and development. It is my hope that you find this to be a useful collection of articles that not only inform, but inspire you to examine, and possibly even evolve, your own thoughts on the craft.\n","date":"September 9 2025","externalUrl":null,"permalink":"/about/","section":"","summary":"","title":"About","type":"page"},{"content":"Below I’ve assembled some terms with definitions. I’ve written them based on how I presently use or perceive them as it relates to game design. They are subject to change and you are free to disagree with any or all of them. As with everything else, they will evolve over time.\nTerm Definition 3Cs Stands for Character, Camera, Controls (in any order) and centres around the gameplay experience of those core aspects of gameplay. Abstraction The practice of translating or representing a specific example or occurence into a generalised idea or system. Agile A project management methodology intended to place focus on interactions between contributors and product owners in a way that allows for rapid, early results and iteration. AI (Artificial Intelligence) The decision making entity or process used by entites during gameplay to carry out actions. Does not refer to Large Language Models (LLMs) or Machine Learning (ML). Backlog A project management tool used to organise work that is expected to be done, but without a firm delivery date. Backtrack A gameplay mechanic that requires the player to retraverse a previously expored area in order to gain a benefit or progress further in the game. Balance The resulting experience and perception of systems during gameplay Balancing See tuning Behaviour Tree A hierarchical set of actions and conditions that govern how an AI entity acts during gameplay Blocker A task that prevents the progress or completion of another task. Bug An unintended result of code or data, experienced during gameplay Chording (Input) Input that is activated by pressing more than button simultaneously Code The instructions written by a programmer for the hardware to follow Cognitive Load The amount of effort required by the player to continually preceive, understand, store and recall information related to the gameplay experience. Collision The intersection of two objects during gameplay. Often refers to preventing objects from overlapping or intersecting. Conception One of the earliest project phases in which the core idea for the game is defined and documented. Content Aspects of the game that used by systems and features as players experience gameplay. Includes, but not limited to, art, levels, missions and narrative. Context The specific conditions or situation that form the bounds of the possibility space under consideration. Combinatorial Explosion A term used to describe an exponentially growing set of possibilities Cut The process of removing tasks, systems or features from a game Data Any information that is an input acted upon by a system Deliverable A defined unit of work with a deadline or due date Emergence An unplanned result of interacting systems during gameplay. Emergent Gameplay Situations and outcomes created by the unplanned intersection of overlapping systems during Gameplay. Entity An object within gameplay that has a defined set of attributes, beyond a prop. Typically used to refer to objects of consquence within the gameplay experience, such as the player or mobs. Experiential Game Design A game design methodology where a desired player experience drives feature and system design Fantasy The imagined experience, world and/or identity the player will engage with in the course of gameplay. First Principle The most basic, foundational core of an idea or assumption, used to define the problem space of a feature or goal Feature A portion of the game, usually an atomic collection of systems, that is unique in it\u0026rsquo;s function within the game. Finaling The act of polishing the game before release. Sometimes synonymous with Shipping. Game Design The discipline or process of defining the rules of how a system, feature or game functions. AKA Design Game Design Analysis The practice or process of examining a game\u0026rsquo;s features or systems, either in isolation or as a whole, to understand how they interact to produce a result. AKA Design Analysis, Analysis Game Design Critique The practice or process of producing an argument about aspects of a game\u0026rsquo;s design and their effects on the game or player experience. AKA Design Critique Game Feel A term used to describe the responsiveness and polish experienced during gameplay. Gameplay The active component of playing the game by interacting with the systems and mechanics. Can be used to decribe the player experience as a whole, or in part. Goal A defined, measurable outcome or result of a design, feature, system or task. Hard Failure A gameplay state that results in a player failing a gameplay challenge in an unrecoverable way, usually resulting in losing a life or reloading from a check point or save. Hard Gate A gameplay challenge or condition the player is required to overcome in order to a dvance. Ideation The process of generating and refining ideas. AKA Brainstorming Input Any data that enters a system. Input Buffering Preserving a button press for an amount of time, to be consumed after a gameplay action or duration has occurred. Implementation The act of translating a design from a written form to a feature or system within the game Implementation Detail A specific piece of information relevant to the implementation of a feature or system Level Design The discipline or process of defining, architecting and producing the playable spaces and geometry that gameplay occurs within. MDA A game design framework standing for Mechanics, Dynamics, Aesthetics, intended as a holistic approach to game design.\nReference: https://users.cs.northwestern.edu/~hunicke/pubs/MDA.pdf Mechanic A gameplay interaction between the player and one or more systems. Metrics Defines the specific distances and tolerances for gameplay and props Milestone A project management goal used to define and organise units of work, usually within an allotted amount of time. Mob Short for Mobile. A now largely outdated term used to describe any in-game entity capable of self-locomotion. One Pager A breif, one page synopsis of a feature and it\u0026rsquo;s core elements. Typically produced in advance of a complete feature design Output Any data that exits a system. Overload (Input) Any player-facing input that has multiple contextual actions associated with it. Parameter A value, usually tunable, that is used by a system. Pillar A statement that defines a central thematic or gameplay experience within the game Pitch A presentation of a proposed feature, system or mechanic - either new or to refine an existing - intended to acquire approval to proceed with tasks to accomplish the propsed work. Player The individual presently controlling the interactions with the game. Player Experience An intellectual, emotional or physical state or outcome, induced in a player by the game, either intentional or unintentional, as a result of playing. Polish A term used to describe the amount of additional work, including tuning, any aspect of a game has received during development, beyond it\u0026rsquo;s functional implementation. Possibility Space A conceptual construct representing the spectrum of potential options, within the current context, in both design and gameplay Problem Space A conceptual framing of the bounds a challenge or identified problem exists within. Prop An object within the game world Pre-Production An early phase of development where features are prototyped to validate decisions and assumptions made in the Conception phase Production (Discipline) The discipline of project management Production (Phase) The phase of development where the bulk of the content and features are implemented. Prototype The initial rough implementation of a feature or system intended to prove it\u0026rsquo;s validity within the gameplay experience. Razor A philosophical princple that is used to further hone in on specific expectations, experiences or approaches while developing the game Rational Game Design A game design methodology to create observable, internally consistent systems with clear, predictable outcomes for players. Based on the phrase \u0026ldquo;Form follows function\u0026rdquo;. Review The process, formal or informal, of examining a feature at various points of implementation or polish. Typically done in a group meeting to approve the feature or generate a list of tasks. Risk vs Reward A razor used to evaluate the balance of potential for loss against a positive outcome for the player in a gameplay challenge. Scope The defined or available amount of work to be done to complete the task, system or feature in question. Can be used more broadly as a high level concept for the entire game to define what is and is not expected or possible within the given timeframe or product. Scrum A project management framework used with Agile, intended to provide an environment of open communication where change and iteration is expected and responded to in a timely manner. Ship The act of releasing the game publicly. AKA Shipping Shipping (Phase) The final phase of a project before release. Soft Failure A gameplay state that results in a player failing a gameplay challenge in a recoverable way, usually being able to reset the mechanic after a short delay. Soft Gate A gameplay challenge or condition that the player can fail or partially succeed and still advance. Sprint A realtive short period of time, typically measured in weeks, defined within a milestone which tasks are assigned to. Stand-up (Meeting) A short, informal meeting where participants state their currents tasks, progress and any dependancies (also called blockers) to their immediate team members. Used as component of Scrum. Stand-up (Feature) The process of producing an early implementation of a feature or system. State Machine An atomic unit that consists of a collection of States, which perform actiosn, connected by conditional Transitions, to provide a consistent, situational outcome. System A collection of rules that produces an output. Task A defined unit of work with a stated outcome. Trigger An action that occurs when specific criteia are met within gameplay. Often used with a volume to detect an entity entering or exiting the volume to produce an effect. Tuning The process of adjusting values defined in data to produce a desired result or outcome within a feature or system. Waterfall A project management methodology that defines tasks that must be completed in a set sequence based on dependancies. Vision The core idea behind the game. This defines the fantasy the player engages with in broad terms for the team to reference. Volume An invisible piece of in-game geometry ","date":"September 9 2025","externalUrl":null,"permalink":"/pages/glossary/","section":"Pages","summary":"","title":"Glossary","type":"pages"},{"content":"How does a game designer decide how to approach a mechanic or system? What leads them to the conclusions they draw? How do they form their thoughts and ideas about a feature or system into a tangible experience for the player?\nThey use their Design Sense.\nDesign Sense is a term I use to describe the way a game designer approaches their craft. It is the yardstick they hold up to measure the player experience. It informs their expectations of how a feature, system or mechanic works when they interact with it.\nIt is informed by their experiences, their preferences and tastes, their personal views and the goals they believe are important to achieve, both in the final product but also during development. It is a game designer\u0026rsquo;s internal compass, and it is the most important tool a designer has. And, like the designer themself, it evolves with time and experience.\nDesign Sense and the Vision # Many games have a stated core vision. This defines the razor(s) that are central to the experience and attempts to provide a common rallying point for the team to focus their approach to decision making, expected implementation of the fantasy and the player experience around.\nSo, how does your design sense work with the core vision? It starts by understanding what the game is, and what it is not.\nFor example, if the game’s fantasy is to play as a private investigator, would it make sense to add a finishing move mechanic to combat? Probably not unless the PI also happens to enjoy fighting in cage matches.\nWould it make sense to add a driving feature? Quite possibly - stake-outs, tailing suspects and car chases are a part of the Private Investigator fantasy in a lot of media, after all.\nConsider, however, that driving can be a big, expensive feature depending on how in-depth you want it to be. There could be simpler, on-rails driving or trailing sections - and it’s worth noting that doing stake-outs, tailing suspects and chases can all be done without an actual driving feature and all of the additional cost it incurs, instead occurring on foot.\nSimilarly, the finishing move mechanic might fit very well into your fantasy if your player character is meant to be in the mould of Sherlock Holmes who, even outside Hollywood portrayal, occasionally got into some fisticuffs and was said to practice “baritsu” (bartitsu).\nIn both of the examples above, I used my design sense to step through connected aspects of the fantasy, make lists of what may or may not fit, and explore those. While some of the ideas I generated might not work, for various reasons, they were pathways to finding interesting mechanics that fit the fantasy. This is how understanding what the game is intended to be, and what it is not intended to be, will inform the decisions you make during development and your justifications for those decisions.\nDesign Sense Vs the Vision # There may be times when your design sense seems to clash with the vision. Where your particular approaches to solving problems never seem to hit the mark. This can be difficult and even frustrating. In these events it’s worth taking a moment to regroup and look at other features, which have aligned with the vision, and try to understand why. If possible, discuss it with another designer, they may be able to offer a different point of view or share ideas that help you align better with the vision.\nOne useful tactic for this can be ‘Yes and’ing. Even if you don’t immediately agree with a solution, try saying yes and expanding on the feature along similar lines, in your own way. It may not be the feature you expected it to be, but you might find something better too. It’s worthwhile to note that this does not give carte blanche to suggestions that break scope, but rather a way to find the core of the idea that can be worked into a shippable design.\nDesign Sense in Action # Here is a scenario to consider, and some ideas on how to approach it. The approaches that resonate most with you will be those that agree most with your design sense.\nDuring early production you’re tasked with figuring out how a specific, largely undefined feature will fit into the game. It is based on the core narrative conceit that the character can create objects they’ve seen before.\nAdditionally, the moment-to-moment 3Cs gameplay is largely defined and implemented, and all of the buttons on the controller are already in use. How do we approach this challenge?\nGiven the defined situation, I suggest starting with the core narrative conceit. What does it say about the game? Does it set up an expectation you can take advantage of?\nFor this example, the conceit is that the character can create objects they’ve seen before. This is a fairly broad, open-ended task so there are many possible approaches, all with varying levels of complexity and player agency.\nThe additional wrinkle that all the buttons on the controller are already used means that if we want to add an ability to let the player create objects, we need to find a way to do that.\nNote: For the sake of brevity and remaining within a reasonable scope of discussion for the purposes of this article, I will intentionally omit or gloss over some details that would normally be important to the player’s experience, in the name of making a broader point. As an exercise for the reader, identify these aspects for yourself and explore how your own solutions might work within the confines of the problem space.\nHere’s a few examples:\nThe Everything Approach # We keep a list of every object in the game that the player has seen. In the game proper, this would be every prop that has passed through the view frustum of the player camera.\nIn order to allow the player to create them, we overload a button with a hold or long press in order to summon a menu that they can choose the object from. In this case we’ll say that summoning a menu puts the player into a different gameplay context, which means the previously used buttons are free within the confines of the menu to be used to navigate the menu and select the object to summon. Alternatively we could re-use an existing input convention for navigating the UI for this menu, if one existed.\nThis is, undoubtedly, the most expensive option from both a development and player experience standpoint. It requires every object type in the game to be tracked as to whether you’ve seen it or not and it requires the player to be able to sort through them easily. It also requires all objects to have a use and for players to understand them. For a small game with only a few recurring objects this is less of a problem, but for a game made at scale that could have dozens or even hundreds of objects, this becomes a combinatorial explosion and requires a deep investment, across all disciplines, in the mechanic to make it worthwhile. This could also become a limiting factor in how many objects the game can have if the player needs to be able to create them all.\nIt does, however, present an elegant approach to solving the issue of inputs.\nThe Mechanical Approach # In data we tag objects and require the player to interact with them to learn how to create them. This introduces another new mechanic, though - interacting with the objects. This could take a number of forms but for simplicity let’s say the player inspects the object.\nFor inspecting an object, we could overload an existing button when looking at an object you can learn to summon. Overloading this input will allow a contextual interaction that players can learn, but will also require objects that can be inspected to not interfere with other aspects of gameplay, which may require additional metrics to be established for their placement.\nFor creating an object we could reuse the same button with a hold action on it to summon the object creation menu. If that isn’t possible, a chorded input could be a possibility.\nIt’s worth mentioning that this approach also means there’s the possibility that a player could simply not inspect and learn how to create objects. A common solution to the problem is that in order to advance you need to be able to create the object.\nThe Restricted Approach # The list of objects a player can create is authored per-level to strongly restrict what they can create, and when. This means someone (probably you!) needs to curate a list of selected objects that the player can create in each level. The input issue could be solved by having specific locations that visually hint which object the player can summon there, and then contextually overload a button to create the object.\nThis has the least player agency of the options but is also the most straightforward and easily understood option. Players will need to understand why the list of objects they can create changes from level to level, and the form that takes can vary - perhaps it’s an expanding list that adds a few new objects in each level, that’s easily understood. Or it could be completely new or different objects in each level because the levels themselves are so different from one another that previous objects no longer make sense or serve a purpose in this environment.\nThe Mix and Match Approach # The final approach I’ll describe here - which is by no means the final option - is one that is very well worth considering. By taking elements from each idea and combining them, you take the best pieces of each and make something that is potentially stronger than all the other options. It’s also an approach that is often taken in design out of necessity and compromise.\nAn example of mix and match would be:\nThe long-press, new context menu (Everything) The inspection mechanic from (Mechanical) The limited number of learnable objects per level (Restricted) Combining these aspects of each approach has now given us a feature that has a limited scope that the team could potentially produce and support, and allows us strong controls over which objects can be learned and used in each level.\nSo, how do you choose which approach is right? Well, spoilers, there are no right answers. It entirely depends on the direction, vision, pillars, scope of the project, what project leadership actually wants for the game and your own design sense.\nYou can, however, make it a little easier by looking at a few additional factors.\nWhat is the core gameplay of the game you’re making? How does a given approach enhance or diminish the gameplay? Is this solution in keeping with the themes and experiences in the game? Is this really needed to deliver the desired experience? Is the required effort worth the expected outcome? Is this new or groundbreaking in some way? Does it need to be? Developing \u0026amp; Improving Your Design Sense # So, if design sense is so important, is it something you’re born with? Is it an innate sixth videogame sense that only a lucky few have?\nWell, no actually. It’s a skill that you develop. Here’s a few ways to do that:\nPlay games to see what ‘feels good’ to you and what doesn\u0026rsquo;t. Analyze why you feel something does or doesn’t feel good and what you would have considered doing instead, while considering the rest of the game and what knock-on effects it would have. If you made those changes, would it be the same game?\nExplore non-games media. Yes, you can develop your design sense by not playing games! Reading books, watching films and playing tabletop games all contribute to your sense of what feels good in an experience. Remember, in games we are making experiences and if done well that will transcend the moment to moment and stick with players.\nExpand the pool of experiences you have to draw on. Explore new activities like hiking, rock climbing, sailing, exploring unfamiliar cuisine, building furniture or metal working. Every human experience can teach us something about what we do and don’t like, and why. More importantly, they can change our minds as well. Always keep an open mind and be willing to consider your world view may be too narrow or you may have drawn the wrong conclusions.\nFinally, and most importantly: Be curious.\n","date":"September 9 2025","externalUrl":null,"permalink":"/posts/on-design-sense/","section":"Posts","summary":"What it is and how designers use it to inform their decisions","title":"On Design Sense","type":"posts"},{"content":"","date":"September 9 2025","externalUrl":null,"permalink":"/pages/","section":"Pages","summary":"","title":"Pages","type":"pages"},{"content":"Often when someone says they want to be a game designer, they usually follow it with “I have a great idea for a game!”.\nNow, there’s nothing wrong with that, but expecting to become a designer to execute on your personal vision for a game is a long path. Working professionally, you will very likely have to spend a number of years on projects where the vision comes from the Creative Director before reaching a point where you’re the one whose ideas are being made into reality. There are, of course, exceptions to this - particularly if you’re working alone or in a small team where you can have more creative control or input, but even then there’s a lot more to the job.\nSo then, if a designer’s role isn’t just about having the next great idea, what is it? Let’s dig into that.\nTranslating direction into systems and mechanics # As a designer, you’ll be receiving direction from someone above you. This will likely be a lead designer (some projects have only one, some have several) or in some cases a director.\nDepending on how the studio or project runs, you may be given - or asked to produce - a ‘one pager’ or a brief of some kind that roughly outlines what the high level experience or functionality should be. From this, it will be your job to create a detailed breakdown and description of the feature and all of its components for the team to build. The form this takes will again depend on your studio, project and team. In some cases it may be a paragraph or point form list outlining how the system or feature works, while in others it may be an exhaustive breakdown of every aspect including art, audio, animation, AI behaviours, player-system interactions and every possible edge case with plans for mitigation.\nPrototyping # Depending when you join a project you may or may not have an active role in prototyping mechanics or features, and if you do, your part in that can vary from guiding programmers as they put a quick representation of the system together for review/approval, to scripting the system yourself. Getting familiar with a visual scripting tool like Unreal Blueprints and Unity Visual Scripting, or learning a scripting language such as LUA, Python or C#1 is a valuable skill that not only lets a designer build towards a representation of the system they want directly, but it also lets you talk with more technical team members in a direct way and understand logic flow, both of which are highly beneficial.\nIt’s worth noting that at this stage you’re not looking to make something that’s perfect, polished or performant, just a representation of the thing you’re working towards. It will be rough and almost certainly need to be refined or rebuilt, but the goal here is to get something that’s playable and shows where the feature or mechanic is going so the team can see how it fits into the game as a whole and what changes are needed (this is can be referred to as the ‘intent’ of the feature).\nPresenting Features/Mechanics # Your studio or project may ask designers to give a presentation to the team in order to get approval or inform and build consensus for the feature in the team. Usually this is done with presentation software, like powerpoint, google slides or miro, and the content should be kept clean, clear and easy to understand. Reference material, concept art and animations can help convey the intended functionality of the feature.\nThis process can be helpful in clarifying your design, but it can also generate feedback from the team that should be taken into account if the feature is approved for development. While, as the designer, it will be your job to design and document the feature, your team will be helping to build it and their input should be considered accordingly.\nCreating \u0026amp; Maintaining Documentation # Another key responsibility for a designer is documentation.The form that it takes will, as always, depend on your studio, project or team. Word-processor documents, spreadsheets and visual diagrams are all common and can each serve different purposes depending on the feature, its complexity and the audience it is intended for.\nThe documentation you create won’t exist in a vacuum, though. You will receive feedback on your written design or prototype. As development progresses and other systems take shape, your feature and design may need to be adjusted, changed, redesigned or cut entirely from the game.\nAs this happens, keeping your documentation up to date, to ensure the team has a clear picture of what is expected and how the game will function, is an important task. Outdated documentation can be detrimental to both the project and team.\nFollowing your features \u0026amp; Communicating with the Team # Documentation is a good reference, but communicating with the team about your feature is even more important, especially as not everyone will read the documentation.\nAs your feature passes through implementation, it’s important to communicate with the people who are building it to ensure it matches the intended design. More than a few designers have fallen into the trap of believing what they want is clear, only to have a feature delivered and discover that some aspect was misunderstood or poorly communicated, resulting in additional work and/or missed deadlines.\nBy talking with your team about your vision for the feature, and how it fits into the overall experience of the game, you can be sure you’re all on the same page. This also helps address issues as they come up - sooner rather than later - which may prevent the feature from being shipped in a state you’re not happy with, or cut entirely.\nReview \u0026amp; Iteration # Once your feature is in the game, you will spend time playing it to generate feedback on any changes that need to be made. That feedback could be asking for more tunable values, having bugs created for unintended behaviours in the feature, or praise and encouragement for a job well done. Never underestimate the power that positive feedback can have on your teammates. Making games is a long, difficult process, and celebrating a job well done or progress on a feature can make the journey easier and help buoy morale.\nYou will also receive feedback from the team on the feature as well. Most designers expect their lead and directors to provide the feedback, but it’s important to know that valuable feedback can come from anywhere. Getting the team involved in the feedback process not only gives them a feeling of ownership and importance, but it also gives you further insight into how your feature is working and is being perceived.\nAt this stage you may also begin having playtests. Getting the opinion of people outside your team can also help you understand where things are or aren’t working, how your feature fits into the rest of the game, and what players do or don’t understand about it. This can help highlight what players find too difficult or too easy and where they get lost or confused. This is just a small example as playtesting is a much larger topic than can be fully unpacked here, but it’s important to be aware of.\nAll of this feedback is valuable. You may use it to tune the values that have been exposed in the tools for you directly, or you may provide it to the team in order to help drive change or gain consensus on what needs to be addressed.\nRegardless of the feedback, spending time to understand the details of specific feedback, and why it was given, is valuable. Sometimes unrelated systems or events during gameplay can lead to a feature being misunderstood or perceived in a way you didn’t expect, and the fix then may or may not be in the feature being tested. How you address the feedback will be partially up to you, but it will also involve your team. Leads and directors will have final say on any mitigation that you or the team suggest.\nPolish # As the project nears completion, there is generally a period of time where the game is functional, playable from start to finish, and is mostly free of large, game breaking bugs. At this time features and mechanics will enter the polish phase where you may spend the extra time to iron out all the little kinks in the experience and make it as smooth as possible.\nDevelopment isn’t finished at this stage; the technical teams will be working to stabilize the game in order to avoid crashes and bugs, but also optimize it to run as well as possible throughout. They will be sorting out framerate dips, lengthy load times and other performance hitches.\nThis is a time of negotiation and designers will want their systems iterated on so the process of, for example, resolving that annoying two second delay between completing an interaction with a chest and getting to see the loot, will end up on a list of priorities. If you want it fixed you’ll need to advocate for it based on how important you feel it is when weighed against all the other changes you or other designers, leads and directors want made.\nThis is not an exhaustive description of what all game designers do, but rather an outline to help clarify what the role of a designer is and roughly what to expect. It’s worth noting that some designers are more specialized and focus on specific aspects such as AI, Combat or Systems, while others may be more generalized. As always, this depends on the studio, project or team.\nWhile C# is a full programming language in its own right, Unity, Godot and other engines use it as a scripting language.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"September 9 2025","externalUrl":null,"permalink":"/posts/what-a-game-designer-does/","section":"Posts","summary":"A high level overview of what game designers do","title":"What a Game Designer Does","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]